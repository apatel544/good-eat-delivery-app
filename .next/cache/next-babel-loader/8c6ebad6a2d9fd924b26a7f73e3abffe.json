{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"firebase/compat/app\";\nimport 'firebase/compat/auth';\nimport { initializeApp } from \"firebase/app\";\nimport { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Cookie from \"js-cookie\";\nimport axios from \"axios\";\nvar API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDuZ-LwCCSahX6j2T8QdUmq8mR4XZkqhmw\",\n  authDomain: \"goodeats-delivery.firebaseapp.com\",\n  projectId: \"goodeats-delivery\",\n  storageBucket: \"goodeats-delivery.appspot.com\",\n  messagingSenderId: \"851617425804\",\n  appId: \"1:851617425804:web:d55699e0562b2b4e1d8ea9\"\n}; // Initialize Firebase \n\nfirebase.initializeApp(firebaseConfig);\nexport var auth = firebase.auth();\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nvar googleEmail = '';\nvar googleUID = '';\nvar googleDis = '';\nexport var signInWithGoogle = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return auth.signInWithPopup(provider);\n\n          case 2:\n            res = _context.sent;\n            googleEmail = res.user.email;\n            googleUID = res.user.uid;\n            googleDis = res.user.displayName;\n\n            if (!false) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 8:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              console.log('EMAIL: ', googleEmail);\n              console.log('UID ', res.user.uid);\n              console.log('DISPLAY NAME ', res.user.displayName);\n              axios.post(\"\".concat(API_URL, \"/auth/local/register\"), {\n                username: googleDis,\n                email: googleEmail,\n                password: googleUID\n              }) // .post(`${API_URL}/api/google/login/`, {identifier: googleEmail, password: googleUID })\n              // .post(`${API_URL}/api/auth/google/login/`, { googleAccess })\n              .then(function (response) {\n                //set token response from Strapi for server validation\n                Cookie.set(\"token\", response.data.jwt); //resolve the promise to set loading to false in SignUp form\n\n                resolve(response); //redirect back to home page for restaurance selection\n\n                Router.push(\"/\");\n                console.log(\"Google Login Success\");\n              })[\"catch\"](function (error) {\n                //reject the promise and pass the error object back to the form\n                // reject(error);\n                console.log(\"Google Login Fail\");\n              });\n            }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function signInWithGoogle() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/ankurpatel/Desktop/Projects/2022_projects/good-eat-delivery-app/components/firebase.js"],"names":["firebase","initializeApp","useEffect","Router","Cookie","axios","API_URL","process","env","NEXT_PUBLIC_API_URL","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","googleEmail","googleUID","googleDis","signInWithGoogle","signInWithPopup","res","user","email","uid","displayName","Promise","resolve","reject","console","log","post","username","password","then","response","set","data","jwt","push","error"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,sBAAP;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,IAAmC,uBAAnD;AAGA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,mCAFS;AAGrBC,EAAAA,SAAS,EAAE,mBAHU;AAIrBC,EAAAA,aAAa,EAAE,+BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACAhB,QAAQ,CAACC,aAAT,CAAuBS,cAAvB;AAEA,OAAO,IAAMO,IAAI,GAAGjB,QAAQ,CAACiB,IAAT,EAAb;AAGP,IAAMC,QAAQ,GAAG,IAAIlB,QAAQ,CAACiB,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,OAAO,IAAMC,gBAAgB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEVR,IAAI,CAACS,eAAL,CAAqBR,QAArB,CAFU;;AAAA;AAEtBS,YAAAA,GAFsB;AAG5BL,YAAAA,WAAW,GAAGK,GAAG,CAACC,IAAJ,CAASC,KAAvB;AACAN,YAAAA,SAAS,GAAGI,GAAG,CAACC,IAAJ,CAASE,GAArB;AACAN,YAAAA,SAAS,GAAGG,GAAG,CAACC,IAAJ,CAASG,WAArB;;AAL4B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,6CAYrB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBd,WAAvB;AACAa,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBT,GAAG,CAACC,IAAJ,CAASE,GAA7B;AACAK,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,GAAG,CAACC,IAAJ,CAASG,WAAtC;AACA1B,cAAAA,KAAK,CACFgC,IADH,WACW/B,OADX,2BAC0C;AAACgC,gBAAAA,QAAQ,EAAEd,SAAX;AAAsBK,gBAAAA,KAAK,EAAEP,WAA7B;AAA0CiB,gBAAAA,QAAQ,EAAEhB;AAApD,eAD1C,EAEE;AACA;AAHF,eAIGiB,IAJH,CAIQ,UAACC,QAAD,EAAc;AAClB;AACArC,gBAAAA,MAAM,CAACsC,GAAP,CAAW,OAAX,EAAoBD,QAAQ,CAACE,IAAT,CAAcC,GAAlC,EAFkB,CAIlB;;AACAX,gBAAAA,OAAO,CAACQ,QAAD,CAAP,CALkB,CAMlB;;AACAtC,gBAAAA,MAAM,CAAC0C,IAAP,CAAY,GAAZ;AACAV,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,eAbH,WAcS,UAACU,KAAD,EAAW;AAChB;AACA;AACAX,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,eAlBH;AAmBD,aAvBM,CAZqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBX,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import firebase from \"firebase/compat/app\";\nimport 'firebase/compat/auth';\nimport { initializeApp } from \"firebase/app\";\nimport { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Cookie from \"js-cookie\";\nimport axios from \"axios\";\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDuZ-LwCCSahX6j2T8QdUmq8mR4XZkqhmw\",\n  authDomain: \"goodeats-delivery.firebaseapp.com\",\n  projectId: \"goodeats-delivery\",\n  storageBucket: \"goodeats-delivery.appspot.com\",\n  messagingSenderId: \"851617425804\",\n  appId: \"1:851617425804:web:d55699e0562b2b4e1d8ea9\"\n};\n\n// Initialize Firebase \nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\n\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\nlet googleEmail = '';\nlet googleUID = '';\nlet googleDis = '';\nexport const signInWithGoogle = async () => {\n  \n    const res = await auth.signInWithPopup(provider)\n    googleEmail = res.user.email;\n    googleUID = res.user.uid;\n    googleDis = res.user.displayName\n    \n\n    if (typeof window === \"undefined\") {\n      return;\n    }\n  \n    return new Promise((resolve, reject) => {\n      console.log('EMAIL: ', googleEmail)\n      console.log('UID ', res.user.uid)\n      console.log('DISPLAY NAME ', res.user.displayName)\n      axios\n        .post(`${API_URL}/auth/local/register`, {username: googleDis, email: googleEmail, password: googleUID })\n        // .post(`${API_URL}/api/google/login/`, {identifier: googleEmail, password: googleUID })\n        // .post(`${API_URL}/api/auth/google/login/`, { googleAccess })\n        .then((response) => {\n          //set token response from Strapi for server validation\n          Cookie.set(\"token\", response.data.jwt);\n  \n          //resolve the promise to set loading to false in SignUp form\n          resolve(response);\n          //redirect back to home page for restaurance selection\n          Router.push(\"/\");\n          console.log(\"Google Login Success\")\n        })\n        .catch((error) => {\n          //reject the promise and pass the error object back to the form\n          // reject(error);\n          console.log(\"Google Login Fail\")\n        });\n    });\n    \n};\n"]},"metadata":{},"sourceType":"module"}